import {
  pluginJSX,
  pluginReact,
  PluginReactHooks,
  pluginTestingLibrary,
} from "../plugins";
import {ConfigItem} from "../types";

export const react = (): ConfigItem[] => {
  return [
    {
      name: "arcnight:react",
      plugins: {
        jsx: pluginJSX,
        react: pluginReact,
        "react-hooks": PluginReactHooks,
        "testing-library": pluginTestingLibrary,
      },
    },
    {
      rules: {
        "no-underscore-dangle": [
          "error",
          {
            allow: ["__REDUX_DEVTOOLS_EXTENSION_COMPOSE__"],
            allowAfterThis: false,
            allowAfterSuper: false,
            enforceInMethodNames: true,
          },
        ],
        "class-methods-use-this": [
          "error",
          {
            exceptMethods: [
              "render",
              "getInitialState",
              "getDefaultProps",
              "getChildContext",
              "componentWillMount",
              "UNSAFE_componentWillMount",
              "componentDidMount",
              "componentWillReceiveProps",
              "UNSAFE_componentWillReceiveProps",
              "shouldComponentUpdate",
              "componentWillUpdate",
              "UNSAFE_componentWillUpdate",
              "componentDidUpdate",
              "componentWillUnmount",
              "componentDidCatch",
              "getSnapshotBeforeUpdate",
            ],
          },
        ],
        "react/display-name": ["off", {ignoreTranspilerName: false}],
        "react/forbid-prop-types": [
          "error",
          {
            forbid: ["any", "array", "object"],
            checkContextTypes: true,
            checkChildContextTypes: true,
          },
        ],
        "react/forbid-dom-props": ["off", {forbid: []}],
        "react/jsx-boolean-value": ["error", "never", {always: []}],
        "react/jsx-handler-names": [
          "off",
          {
            eventHandlerPrefix: "handle",
            eventHandlerPropPrefix: "on",
          },
        ],
        "react/jsx-key": "off",
        "react/jsx-no-bind": [
          "error",
          {
            ignoreRefs: true,
            allowArrowFunctions: true,
            allowFunctions: false,
            allowBind: false,
            ignoreDOMComponents: true,
          },
        ],
        "react/jsx-no-duplicate-props": ["error", {ignoreCase: true}],
        "react/jsx-no-literals": ["off", {noStrings: true}],
        "react/jsx-no-undef": "error",
        "react/jsx-pascal-case": [
          "error",
          {
            allowAllCaps: true,
            ignore: [],
          },
        ],
        "react/sort-prop-types": [
          "off",
          {
            ignoreCase: true,
            callbacksLast: false,
            requiredFirst: false,
            sortShapeProp: true,
          },
        ],
        "react/jsx-sort-prop-types": "off",
        "react/jsx-sort-props": [
          "off",
          {
            ignoreCase: true,
            callbacksLast: false,
            shorthandFirst: false,
            shorthandLast: false,
            noSortAlphabetically: false,
            reservedFirst: true,
          },
        ],
        "react/jsx-uses-react": ["error"],
        "react/jsx-uses-vars": "error",
        "react/no-danger": "warn",
        "react/no-deprecated": ["error"],
        "react/no-did-mount-set-state": "off",
        "react/no-did-update-set-state": "error",
        "react/no-will-update-set-state": "error",
        "react/no-direct-mutation-state": "off",
        "react/no-is-mounted": "error",
        "react/no-multi-comp": "off",
        "react/no-set-state": "off",
        "react/no-string-refs": "error",
        "react/no-unknown-property": "error",
        "react/prefer-es6-class": ["error", "always"],
        "react/prefer-stateless-function": [
          "error",
          {ignorePureComponents: true},
        ],
        "react/require-render-return": "error",
        "react/self-closing-comp": "error",
        "react/sort-comp": [
          "error",
          {
            order: [
              "static-variables",
              "static-methods",
              "instance-variables",
              "lifecycle",
              "/^handle.+$/",
              "/^on.+$/",
              "getters",
              "setters",
              "/^(get|set)(?!(InitialState$|DefaultProps$|ChildContext$)).+$/",
              "instance-methods",
              "everything-else",
              "rendering",
            ],
            groups: {
              lifecycle: [
                "displayName",
                "propTypes",
                "contextTypes",
                "childContextTypes",
                "mixins",
                "statics",
                "defaultProps",
                "constructor",
                "getDefaultProps",
                "getInitialState",
                "state",
                "getChildContext",
                "getDerivedStateFromProps",
                "componentWillMount",
                "UNSAFE_componentWillMount",
                "componentDidMount",
                "componentWillReceiveProps",
                "UNSAFE_componentWillReceiveProps",
                "shouldComponentUpdate",
                "componentWillUpdate",
                "UNSAFE_componentWillUpdate",
                "getSnapshotBeforeUpdate",
                "componentDidUpdate",
                "componentDidCatch",
                "componentWillUnmount",
              ],
              rendering: ["/^render.+$/", "render"],
            },
          },
        ],
        "react/jsx-no-target-blank": ["error", {enforceDynamicLinks: "always"}],
        "react/jsx-no-comment-textnodes": "error",
        "react/no-render-return-value": "error",
        "react/require-optimization": ["off", {allowDecorators: []}],
        "react/no-find-dom-node": "error",
        "react/forbid-elements": ["off", {forbid: []}],
        "react/no-danger-with-children": "error",
        "react/no-unused-prop-types": [
          "error",
          {
            customValidators: [],
            skipShapeProps: true,
          },
        ],
        "react/style-prop-object": "error",
        "react/no-unescaped-entities": "error",
        "react/no-children-prop": "error",
        "react/no-array-index-key": "error",
        "react/forbid-foreign-prop-types": ["warn", {allowInPropTypes: true}],
        "react/void-dom-elements-no-children": "error",
        "react/default-props-match-prop-types": [
          "error",
          {allowRequiredDefaults: false},
        ],
        "react/no-redundant-should-component-update": "error",
        "react/no-unused-state": "error",
        "react/boolean-prop-naming": [
          "off",
          {
            propTypeNames: ["bool", "mutuallyExclusiveTrueProps"],
            rule: "^(is|has)[A-Z]([A-Za-z0-9]?)+",
            message: "",
          },
        ],
        "react/no-typos": "error",
        "react/jsx-curly-brace-presence": [
          "error",
          {props: "never", children: "never"},
        ],
        "react/destructuring-assignment": ["error", "always"],
        "react/no-access-state-in-setstate": "error",
        "react/button-has-type": [
          "error",
          {
            button: true,
            submit: true,
            reset: false,
          },
        ],
        "react/jsx-child-element-spacing": "off",
        "react/no-this-in-sfc": "error",
        "react/jsx-max-depth": "off",
        "react/no-unsafe": "off",
        "react/jsx-fragments": ["error", "syntax"],
        "react/state-in-constructor": ["error", "always"],
        "react/static-property-placement": ["error", "property assignment"],
        "react/prefer-read-only-props": "off",
        "react/jsx-no-script-url": [
          "error",
          [
            {
              name: "Link",
              props: ["to"],
            },
          ],
        ],
        "react/jsx-no-useless-fragment": "error",
        "react/no-adjacent-inline-elements": "off",
        "react/function-component-definition": [
          "error",
          {
            namedComponents: ["arrow-function"],
          },
        ],
        "react/jsx-newline": "off",
        "react/jsx-no-constructed-context-values": "error",
        "react/no-unstable-nested-components": "error",
        "react/no-namespace": "error",
        "react/prefer-exact-props": "error",
        "react/no-arrow-function-lifecycle": "error",
        "react/no-invalid-html-attribute": "error",
        "react/no-unused-class-component-methods": "error",
        "react/hook-use-state": "off",
        "react/iframe-missing-sandbox": "off",
        "react/jsx-no-leaked-render": "off",
        "react/no-object-type-as-default-prop": "off",
        "react/sort-default-props": [
          "off",
          {
            ignoreCase: false,
          },
        ],
        "react/forbid-component-props": [
          "warn",
          {
            forbid: [
              {
                propName: "data-test-id",
                message: "Please use `data-testid` instead",
              },
            ],
          },
        ],
        "react/jsx-filename-extension": [1, {extensions: [".jsx", ".tsx"]}],
        "react/jsx-props-no-spreading": "off",
        "react/prop-types": "warn",
        "react/react-in-jsx-scope": "off",
        "react/require-default-props": "off",
        "react-hooks/rules-of-hooks": "error",
        "jsx/alt-text": "error",
        "jsx/anchor-has-content": "error",
        "jsx/aria-activedescendant-has-tabindex": "error",
        "jsx/aria-props": "error",
        "jsx/aria-proptypes": "error",
        "jsx/aria-role": "error",
        "jsx/aria-unsupported-elements": "error",
        "jsx/autocomplete-valid": "error",
        "jsx/heading-has-content": "error",
        "jsx/html-has-lang": "error",
        "jsx/iframe-has-title": "error",
        "jsx/no-access-key": "error",
        "jsx/no-distracting-elements": "error",
        "jsx/no-noninteractive-element-to-interactive-role": [
          "error",
          {
            ul: [
              "listbox",
              "menu",
              "menubar",
              "radiogroup",
              "tablist",
              "tree",
              "treegrid",
            ],
            ol: [
              "listbox",
              "menu",
              "menubar",
              "radiogroup",
              "tablist",
              "tree",
              "treegrid",
            ],
            li: ["menuitem", "option", "row", "tab", "treeitem"],
            table: ["grid"],
            td: ["gridcell"],
            fieldset: ["radiogroup", "presentation"],
          },
        ],
        "jsx/no-redundant-roles": "error",
        "jsx/role-has-required-aria-props": "error",
        "jsx/role-supports-aria-props": "error",
        "jsx/scope": "error",
        "jsx/tabindex-no-positive": "error",
        "jsx/anchor-ambiguous-text": "warn",
        "jsx/anchor-is-valid": "warn",
        "jsx/control-has-associated-label": "warn",
        "jsx/img-redundant-alt": "off",
        "jsx/interactive-supports-focus": "warn",
        "jsx/label-has-associated-control": "warn",
        "jsx/media-has-caption": "warn",
        "jsx/mouse-events-have-key-events": "warn",
        "jsx/no-aria-hidden-on-focusable": "warn",
        "jsx/no-autofocus": "off",
        "jsx/no-interactive-element-to-noninteractive-role": "warn",
        "jsx/no-noninteractive-tabindex": "warn",
        "jsx/no-static-element-interactions": "warn",
      },
      settings: {
        "import/resolver": {
          node: {
            extensions: [".js", ".jsx", ".json"],
          },
        },
        react: {
          version: "detect",
        },
        propWrapperFunctions: ["forbidExtraProps", "exact", "Object.freeze"],
      },
    },
  ];
};
